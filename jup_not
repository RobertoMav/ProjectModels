{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 441,
   "id": "348cfc80",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import math\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ec6c61fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression \n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "48a1c5c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('gender_submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "id": "cfd51390",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = pd.read_csv('test.csv')\n",
    "train = pd.read_csv('train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "5d36ad00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4c69e252",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "05e07f91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Moran, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330877</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Williams, Mr. Charles Eugene</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>244373</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Masselmani, Mrs. Fatima</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2649</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Emir, Mr. Farred Chehab</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2631</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>O'Dwyer, Miss. Ellen \"Nellie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330959</td>\n",
       "      <td>7.8792</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>859</th>\n",
       "      <td>860</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Razi, Mr. Raihed</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2629</td>\n",
       "      <td>7.2292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>863</th>\n",
       "      <td>864</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sage, Miss. Dorothy Edith \"Dolly\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>69.5500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868</th>\n",
       "      <td>869</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>van Melkebeke, Mr. Philemon</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>345777</td>\n",
       "      <td>9.5000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>879</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Laleff, Mr. Kristo</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349217</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>177 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                                      Name  \\\n",
       "5              6         0       3                          Moran, Mr. James   \n",
       "17            18         1       2              Williams, Mr. Charles Eugene   \n",
       "19            20         1       3                   Masselmani, Mrs. Fatima   \n",
       "26            27         0       3                   Emir, Mr. Farred Chehab   \n",
       "28            29         1       3             O'Dwyer, Miss. Ellen \"Nellie\"   \n",
       "..           ...       ...     ...                                       ...   \n",
       "859          860         0       3                          Razi, Mr. Raihed   \n",
       "863          864         0       3         Sage, Miss. Dorothy Edith \"Dolly\"   \n",
       "868          869         0       3               van Melkebeke, Mr. Philemon   \n",
       "878          879         0       3                        Laleff, Mr. Kristo   \n",
       "888          889         0       3  Johnston, Miss. Catherine Helen \"Carrie\"   \n",
       "\n",
       "        Sex  Age  SibSp  Parch      Ticket     Fare Cabin Embarked  \n",
       "5      male  NaN      0      0      330877   8.4583   NaN        Q  \n",
       "17     male  NaN      0      0      244373  13.0000   NaN        S  \n",
       "19   female  NaN      0      0        2649   7.2250   NaN        C  \n",
       "26     male  NaN      0      0        2631   7.2250   NaN        C  \n",
       "28   female  NaN      0      0      330959   7.8792   NaN        Q  \n",
       "..      ...  ...    ...    ...         ...      ...   ...      ...  \n",
       "859    male  NaN      0      0        2629   7.2292   NaN        C  \n",
       "863  female  NaN      8      2    CA. 2343  69.5500   NaN        S  \n",
       "868    male  NaN      0      0      345777   9.5000   NaN        S  \n",
       "878    male  NaN      0      0      349217   7.8958   NaN        S  \n",
       "888  female  NaN      1      2  W./C. 6607  23.4500   NaN        S  \n",
       "\n",
       "[177 rows x 12 columns]"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[train['Age'].isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "96f02ba8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "833fdaac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>62</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Icard, Miss. Amelie</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113572</td>\n",
       "      <td>80.0</td>\n",
       "      <td>B28</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>829</th>\n",
       "      <td>830</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Stone, Mrs. George Nelson (Martha Evelyn)</td>\n",
       "      <td>female</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113572</td>\n",
       "      <td>80.0</td>\n",
       "      <td>B28</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  ...  Fare Cabin  Embarked\n",
       "61            62         1       1  ...  80.0   B28       NaN\n",
       "829          830         1       1  ...  80.0   B28       NaN\n",
       "\n",
       "[2 rows x 12 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[train['Embarked'].isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "id": "e35feb58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Embarked', ylabel='count'>"
      ]
     },
     "execution_count": 344,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYgAAAEGCAYAAAB/+QKOAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAATuElEQVR4nO3df7DddX3n8edLfrRVodjlikCIYVzKbLQQ6W3U0nUBi0MyVCzLWjJtpdbZqCNu3enulK0z6v5w11mrTgtWNrsg0LGgrUbZNfJjaC1FsXLDRkhAJM3AkoaBoLuA9dcG3/vH+d7lcP3c5BDuOd+b3Odj5sz5fj/fz+d73smZe1/3+ztVhSRJcz2v7wIkSYuTASFJajIgJElNBoQkqcmAkCQ1Hdp3AQvp6KOPrhUrVvRdhiQdMDZv3vxYVU21lh1UAbFixQpmZmb6LkOSDhhJHpxvmbuYJElNBoQkqcmAkCQ1GRCSpCYDQpLUZEBIkprGFhBJTkjyl0nuTbItye907T+T5OYk93fvL5pn/DlJ7kuyPckl46pTktQ2zi2IPcDvVtU/Al4NvDPJSuAS4JaqOgm4pZt/hiSHAB8D1gArgXXdWEnShIwtIKrq4aq6s5t+ErgXOB44D7i663Y18MbG8NXA9qraUVU/BK7rxkmSJmQiV1InWQG8Evgb4JiqehgGIZLkxY0hxwMPDc3vBF41z7rXA+sBli9fPnJNP/+vrxm5r/bP5g+9eSzr/V//7ufGsl490/L33t13CerZ2A9SJ3kh8Bng3VX1xKjDGm3NR99V1Yaqmq6q6amp5u1EJEn7YawBkeQwBuHwyar6bNf8SJJju+XHAo82hu4EThiaXwbsGmetkqRnGudZTAGuAO6tqo8MLboeuKibvgj4fGP4HcBJSU5McjhwYTdOkjQh49yCOB34TeCsJFu611rgg8DZSe4Hzu7mSXJckk0AVbUHuBi4kcHB7U9X1bYx1ipJmmNsB6mr6jbaxxIAXtfovwtYOzS/Cdg0nuokSfvildSSpCYDQpLUZEBIkpoMCElSkwEhSWoyICRJTQaEJKnJgJAkNRkQkqQmA0KS1GRASJKaDAhJUpMBIUlqMiAkSU0GhCSpyYCQJDWN7YFBSa4EzgUerapXdG2fAk7uuhwF/J+qWtUY+wDwJPAUsKeqpsdVpySpbWwBAVwFXAZcM9tQVb82O53kw8Djexl/ZlU9NrbqJEl7Nc5Hjt6aZEVrWZIAbwLOGtfnS5Kem76OQfxj4JGqun+e5QXclGRzkvUTrEuS1BnnLqa9WQdcu5flp1fVriQvBm5O8o2qurXVsQuQ9QDLly9f+EolaYma+BZEkkOB84FPzdenqnZ1748CG4HVe+m7oaqmq2p6ampqocuVpCWrj11Mvwx8o6p2thYmeUGSI2angdcDWydYnySJMQZEkmuB24GTk+xM8tZu0YXM2b2U5Lgkm7rZY4Dbknwd+Brwhaq6YVx1SpLaxnkW07p52n+r0bYLWNtN7wBOHVddkqTReCW1JKnJgJAkNRkQkqQmA0KS1GRASJKaDAhJUpMBIUlqMiAkSU0GhCSpyYCQJDUZEJKkJgNCktRkQEiSmgwISVKTASFJajIgJElNBoQkqWmcjxy9MsmjSbYOtb0/yd8l2dK91s4z9pwk9yXZnuSScdUoSZrfOLcgrgLOabR/tKpWda9NcxcmOQT4GLAGWAmsS7JyjHVKkhrGFhBVdSvw7f0YuhrYXlU7quqHwHXAeQtanCRpn/o4BnFxkru6XVAvaiw/HnhoaH5n19aUZH2SmSQzu3fvXuhaJWnJmnRAfBx4GbAKeBj4cKNPGm013wqrakNVTVfV9NTU1IIUKUmacEBU1SNV9VRV/Qj4rwx2J821EzhhaH4ZsGsS9UmSnjbRgEhy7NDsrwJbG93uAE5KcmKSw4ELgesnUZ8k6WmHjmvFSa4FzgCOTrITeB9wRpJVDHYZPQC8ret7HPDfqmptVe1JcjFwI3AIcGVVbRtXnZKktrEFRFWtazRfMU/fXcDaoflNwI+dAitJmhyvpJYkNRkQkqQmA0KS1GRASJKaDAhJUpMBIUlqMiAkSU0GhCSpyYCQJDUZEJKkJgNCktRkQEiSmgwISVKTASFJajIgJElNBoQkqcmAkCQ1jS0gklyZ5NEkW4faPpTkG0nuSrIxyVHzjH0gyd1JtiSZGVeNkqT5jXML4irgnDltNwOvqKpTgG8C/2Yv48+sqlVVNT2m+iRJezG2gKiqW4Fvz2m7qar2dLNfBZaN6/MlSc9Nn8cgfhv44jzLCrgpyeYk6/e2kiTrk8wkmdm9e/eCFylJS1UvAZHkPcAe4JPzdDm9qk4D1gDvTPLa+dZVVRuqarqqpqempsZQrSQtTRMPiCQXAecCv15V1epTVbu690eBjcDqyVUoSYIJB0SSc4DfA95QVd+dp88LkhwxOw28Htja6itJGp9xnuZ6LXA7cHKSnUneClwGHAHc3J3CennX97gkm7qhxwC3Jfk68DXgC1V1w7jqlCS1HTquFVfVukbzFfP03QWs7aZ3AKeOqy5J0mi8klqS1GRASJKaDAhJUpMBIUlqGikgktwySpsk6eCx17OYkvwk8Hzg6CQvAtItOhI4bsy1SZJ6tK/TXN8GvJtBGGzm6YB4AvjY+MqSJPVtrwFRVX8I/GGSd1XVpROqSZK0CIx0oVxVXZrkF4EVw2Oq6pox1SVJ6tlIAZHkT4CXAVuAp7rmAgwISTpIjXqrjWlg5Xx3X5UkHXxGvQ5iK/CScRYiSVpcRt2COBq4J8nXgB/MNlbVG8ZSlSSpd6MGxPvHWYQkafEZ9Symvxp3IZKkxWXUs5ieZHDWEsDhwGHA31fVkeMqTJLUr1G3II4Ynk/yRnxOtCQd1Pbrbq5V9TngrL31SXJlkkeTbB1q+5kkNye5v3t/0Txjz0lyX5LtSS7ZnxolSc/NqHdzPX/odUGSD/L0Lqf5XAWcM6ftEuCWqjoJuKWbn/tZhzC4z9MaYCWwLsnKUeqUJC2cUc9i+pWh6T3AA8B5extQVbcmWTGn+TzgjG76auBLwO/N6bMa2N49m5ok13Xj7hmxVknSAhj1GMRbFujzjqmqh7t1PpzkxY0+xwMPDc3vBF413wqTrAfWAyxfvnyBypQkjbqLaVmSjd0xhUeSfCbJsjHVlEbbvLuzqmpDVU1X1fTU1NSYSpKkpWfUg9SfAK5n8FyI44H/3rU9W48kORage3+00WcncMLQ/DJg1358liTpORg1IKaq6hNVtad7XQXsz5/r1wMXddMXAZ9v9LkDOCnJiUkOBy7sxkmSJmjUgHgsyW8kOaR7/Qbwrb0NSHItcDtwcpKdSd4KfBA4O8n9wNndPEmOS7IJoKr2ABcDNwL3Ap+uqm3784+TJO2/Uc9i+m3gMuCjDI4HfAXY64Hrqlo3z6LXNfruAtYOzW8CNo1YmyRpDEYNiH8PXFRV/xsGF7wBf8AgOCRJB6FRdzGdMhsOAFX1beCV4ylJkrQYjBoQzxu+LUa3BTHq1ock6QA06i/5DwNfSfLnDI5BvAn4wNiqkiT1btQrqa9JMsPgBn0Bzq8qb30hSQexkXcTdYFgKEjSErFft/uWJB38DAhJUpMBIUlqMiAkSU0GhCSpyYCQJDUZEJKkJgNCktRkQEiSmgwISVKTASFJapp4QCQ5OcmWodcTSd49p88ZSR4f6vPeSdcpSUvdxJ/pUFX3AasAkhwC/B2wsdH1r6vq3AmWJkka0vcuptcBf1tVD/ZchyRpjr4D4kLg2nmWvSbJ15N8McnL51tBkvVJZpLM7N69ezxVStIS1FtAJDkceAPwZ43FdwIvrapTgUuBz823nqraUFXTVTU9NTU1llolaSnqcwtiDXBnVT0yd0FVPVFV3+mmNwGHJTl60gVK0lLWZ0CsY57dS0lekiTd9GoGdX5rgrVJ0pI38bOYAJI8HzgbeNtQ29sBqupy4ALgHUn2AN8DLqyq6qNWSVqqegmIqvou8A/mtF0+NH0ZcNmk65IkPa3vs5gkSYuUASFJajIgJElNBoQkqcmAkCQ1GRCSpCYDQpLUZEBIkpoMCElSkwEhSWoyICRJTQaEJKnJgJAkNRkQkqQmA0KS1GRASJKaDAhJUlMvAZHkgSR3J9mSZKaxPEn+KMn2JHclOa2POiVpKevlkaOdM6vqsXmWrQFO6l6vAj7evUuSJmSx7mI6D7imBr4KHJXk2L6LkqSlpK+AKOCmJJuTrG8sPx54aGh+Z9f2Y5KsTzKTZGb37t1jKFWSlqa+AuL0qjqNwa6kdyZ57ZzlaYyp1oqqakNVTVfV9NTU1ELXKUlLVi8BUVW7uvdHgY3A6jlddgInDM0vA3ZNpjpJEvQQEElekOSI2Wng9cDWOd2uB97cnc30auDxqnp4wqVK0pLWx1lMxwAbk8x+/p9W1Q1J3g5QVZcDm4C1wHbgu8BbeqhTkpa0iQdEVe0ATm20Xz40XcA7J1mXJOmZFutprpKknhkQkqQmA0KS1GRASJKaDAhJUpMBIUlqMiAkSU0GhCSpyYCQJDUZEJKkJgNCktRkQEiSmgwISVKTASFJajIgJElNBoQkqcmAkCQ19fFM6hOS/GWSe5NsS/I7jT5nJHk8yZbu9d5J1ylJS10fz6TeA/xuVd2Z5Ahgc5Kbq+qeOf3+uqrO7aE+SRI9bEFU1cNVdWc3/SRwL3D8pOuQJO1dr8cgkqwAXgn8TWPxa5J8PckXk7x8L+tYn2Qmyczu3bvHVaokLTm9BUSSFwKfAd5dVU/MWXwn8NKqOhW4FPjcfOupqg1VNV1V01NTU2OrV5KWml4CIslhDMLhk1X12bnLq+qJqvpON70JOCzJ0RMuU5KWtD7OYgpwBXBvVX1knj4v6fqRZDWDOr81uSolSX2cxXQ68JvA3Um2dG2/DywHqKrLgQuAdyTZA3wPuLCqqodaJWnJmnhAVNVtQPbR5zLgsslUJGmSTr/09L5LOOh9+V1fXpD1eCW1JKnJgJAkNRkQkqQmA0KS1GRASJKaDAhJUpMBIUlqMiAkSU0GhCSpyYCQJDUZEJKkJgNCktRkQEiSmgwISVKTASFJajIgJElNBoQkqamXgEhyTpL7kmxPckljeZL8Ubf8riSn9VGnJC1lEw+IJIcAHwPWACuBdUlWzum2Bjipe60HPj7RIiVJvWxBrAa2V9WOqvohcB1w3pw+5wHX1MBXgaOSHDvpQiVpKTu0h888HnhoaH4n8KoR+hwPPDx3ZUnWM9jKAPhOkvsWrtRF5Wjgsb6LeDbyBxf1XcJicsB9f7wvfVewmBxQ31/+xbP67l4634I+AqJVee1Hn0Fj1QZgw3MtarFLMlNV033Xof3j93dgW6rfXx+7mHYCJwzNLwN27UcfSdIY9REQdwAnJTkxyeHAhcD1c/pcD7y5O5vp1cDjVfVju5ckSeMz8V1MVbUnycXAjcAhwJVVtS3J27vllwObgLXAduC7wFsmXecidNDvRjvI+f0d2Jbk95eq5q59SdIS55XUkqQmA0KS1GRALHJJXpLkuiR/m+SeJJuS/GzfdWk0Sd6TZFt3y5gtSeZe86NFKsmyJJ9Pcn+SHUkuS/ITfdc1SQbEIpYkwEbgS1X1sqpaCfw+cEy/lWkUSV4DnAucVlWnAL/MMy8A1SLV/ex9FvhcVc3e9uengP/ca2ET1seFchrdmcD/7c7sAqCqtvRXjp6lY4HHquoHAFV1wFyJK84Cvl9VnwCoqqeS/EvgwSTvqarv9FveZLgFsbi9AtjcdxHabzcBJyT5ZpI/TvJP+i5II3s5c372quoJ4AHgH/ZRUB8MCGlMur8yf57BvcJ2A59K8lu9FqVRhfbtfZbUDaoMiMVtG4NfMDpAVdVTVfWlqnofcDHwT/uuSSPZBjzj3ktJjmRw/O9gvSHojzEgFre/AH4iyT+fbUjyC+6qODAkOTnJSUNNq4AHeypHz84twPOTvBn+/3NsPgxcVlXf67WyCTIgFrEaXOb+q8DZ3Wmu24D3440LDxQvBK7uTk++i8EDst7fb0kaxdDP3gVJ7ge+Bfyoqj7Qb2WT5a02JGkfkvwicC1wflUtmRNHDAhJUpO7mCRJTQaEJKnJgJAkNRkQkqQmA0ICkjzV3W119nXJsxh7RpL/8Rw//0tJpvfdszn2qiQXPJfPl1q8WZ808L2qWtXHB3cXYUmLjlsQ0l4keSDJf0xye5KZJKclubG7cPHtQ12PTLKxuyju8iTP68Z/vBu3Lcm/nbPe9ya5DfhnQ+3PS3J1kv+Q5JAkH0pyR/c8ibd1fdI9m+CeJF8AXjyh/w4tMW5BSAM/lWTL0Px/qqpPddMPVdVrknwUuAo4HfhJBvfrmb0V+2oGV0o/CNwAnA/8OfCeqvp2t5VwS5JTququbsz3q+qXALqwORT4JLC1qj6QZD3weFX9Qvegmi8nuQl4JXAy8HMM7g10D3DlAv9/SAaE1NnbLqbru/e7gRdW1ZPAk0m+n+SobtnXqmoHQJJrgV9iEBBv6n7RH8rg+RArgdmAmA2gWf8F+PTQ7RxeD5wydHzhpxk8uOa1wLVV9RSwK8lf7M8/WNoXdzFJ+/aD7v1HQ9Oz87N/ZM29JUElORH4V8DruifKfYHBlsesv58z5ivAmUlm+wR4V1Wt6l4nVtVN83yetOAMCGlhrE5yYnfs4deA24AjGYTA40mOAdbsYx1XAJuAP0tyKHAj8I4khwEk+dkkLwBuBS7sjlEcy+DJg9KCcxeTNDD3GMQNVTXyqa7A7cAHGRwXuBXYWFU/SvI/GRyr2AF8eV8rqaqPJPlp4E+AXwdWAHd2z0jeDbyRwXPKz2Kwy+ubwF89izqlkXmzPklSk7uYJElNBoQkqcmAkCQ1GRCSpCYDQpLUZEBIkpoMCElS0/8D/cZKWgAI+LUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "check = train[(train['Fare']>=75) & (train['Fare']<=95)].sort_values(by=['Fare'])\n",
    "sns.countplot(data=check, x='Embarked')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "id": "0c4cbf10",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_val = train.drop(columns=['Ticket','PassengerId','Name'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 346,
   "id": "add49772",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Cabin Embarked\n",
       "0         0       3    male  22.0      1      0   7.2500   NaN        S\n",
       "1         1       1  female  38.0      1      0  71.2833   C85        C\n",
       "2         1       3  female  26.0      0      0   7.9250   NaN        S\n",
       "3         1       1  female  35.0      1      0  53.1000  C123        S\n",
       "4         0       3    male  35.0      0      0   8.0500   NaN        S"
      ]
     },
     "execution_count": 346,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_val.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 347,
   "id": "ff92aaab",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_val['Sex'] = train_val['Sex'].apply(lambda x: 1 if x == 'male' else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 348,
   "id": "d3bb8174",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    577\n",
       "0    314\n",
       "Name: Sex, dtype: int64"
      ]
     },
     "execution_count": 348,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_val['Sex'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 349,
   "id": "d963feb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_check = pd.get_dummies(train_val['Embarked'],drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "id": "c4a4b4f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df = pd.concat([train_val, train_check],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 351,
   "id": "0bded385",
   "metadata": {},
   "outputs": [],
   "source": [
    "change_shit = final_df[final_df['Age'].notnull()]\n",
    "change_shit = change_shit[['Age','Pclass']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 352,
   "id": "20225f4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38.233441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>29.877630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25.140620</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Age\n",
       "Pclass           \n",
       "1       38.233441\n",
       "2       29.877630\n",
       "3       25.140620"
      ]
     },
     "execution_count": 352,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "change_shit = change_shit.groupby(['Pclass']).mean()\n",
    "change_shit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 353,
   "id": "a98875cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "38.233440860215055"
      ]
     },
     "execution_count": 353,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np_age = change_shit.to_numpy()\n",
    "np_age[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 354,
   "id": "fd4dfd31",
   "metadata": {},
   "outputs": [],
   "source": [
    "def change_age(cols):\n",
    "    Age = cols[0]\n",
    "    Pclass = cols[1]\n",
    "    \n",
    "    if pd.isnull(Age):\n",
    "\n",
    "        if Pclass == 1:\n",
    "            return np_age[0][0]\n",
    "\n",
    "        elif Pclass == 2:\n",
    "            return np_age[1][0]\n",
    "\n",
    "        else:\n",
    "            return np_age[2][0]\n",
    "\n",
    "    else:\n",
    "        return Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 355,
   "id": "a0fd3669",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass  Sex   Age  SibSp  Parch     Fare Cabin Embarked  Q  S\n",
       "0         0       3    1  22.0      1      0   7.2500   NaN        S  0  1\n",
       "1         1       1    0  38.0      1      0  71.2833   C85        C  0  0\n",
       "2         1       3    0  26.0      0      0   7.9250   NaN        S  0  1\n",
       "3         1       1    0  35.0      1      0  53.1000  C123        S  0  1\n",
       "4         0       3    1  35.0      0      0   8.0500   NaN        S  0  1"
      ]
     },
     "execution_count": 355,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df['Age'] = final_df[['Age','Pclass']].apply(change_age,axis=1)\n",
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 356,
   "id": "8369289f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived      0\n",
       "Pclass        0\n",
       "Sex           0\n",
       "Age           0\n",
       "SibSp         0\n",
       "Parch         0\n",
       "Fare          0\n",
       "Cabin       687\n",
       "Embarked      2\n",
       "Q             0\n",
       "S             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 356,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "id": "d8bb6185",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Q  S\n",
       "0         0       3    1  22.0      1      0   7.2500  0  1\n",
       "1         1       1    0  38.0      1      0  71.2833  0  0\n",
       "2         1       3    0  26.0      0      0   7.9250  0  1\n",
       "3         1       1    0  35.0      1      0  53.1000  0  1\n",
       "4         0       3    1  35.0      0      0   8.0500  0  1"
      ]
     },
     "execution_count": 358,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df = final_df.drop(['Embarked'],axis=1)\n",
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "024344b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#final_df = pd.read_csv('final_df.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "id": "d18327cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df['AgeFare'] = final_df['Age'] * final_df['Fare']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 360,
   "id": "ef658213",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='AgeFare', ylabel='Survived'>"
      ]
     },
     "execution_count": 360,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_viz = final_df[['AgeFare','Survived']]\n",
    "df_viz.plot(x='AgeFare', y='Survived', kind='scatter')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 361,
   "id": "071edba7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AgeFare</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>384561.672427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>526596.165717</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                AgeFare\n",
       "Survived               \n",
       "0         384561.672427\n",
       "1         526596.165717"
      ]
     },
     "execution_count": 361,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df[['AgeFare','Survived']].groupby('Survived').sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "id": "de85be8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "      <th>AgeFare</th>\n",
       "      <th>Parch_1</th>\n",
       "      <th>Parch_2</th>\n",
       "      <th>Parch_3</th>\n",
       "      <th>Parch_4</th>\n",
       "      <th>Parch_5</th>\n",
       "      <th>Parch_6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>159.5000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2708.7654</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>206.0500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1858.5000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>281.7500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Q  S    AgeFare  \\\n",
       "0         0       3    1  22.0      1      0   7.2500  0  1   159.5000   \n",
       "1         1       1    0  38.0      1      0  71.2833  0  0  2708.7654   \n",
       "2         1       3    0  26.0      0      0   7.9250  0  1   206.0500   \n",
       "3         1       1    0  35.0      1      0  53.1000  0  1  1858.5000   \n",
       "4         0       3    1  35.0      0      0   8.0500  0  1   281.7500   \n",
       "\n",
       "   Parch_1  Parch_2  Parch_3  Parch_4  Parch_5  Parch_6  \n",
       "0        0        0        0        0        0        0  \n",
       "1        0        0        0        0        0        0  \n",
       "2        0        0        0        0        0        0  \n",
       "3        0        0        0        0        0        0  \n",
       "4        0        0        0        0        0        0  "
      ]
     },
     "execution_count": 362,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_check = pd.get_dummies(final_df['Parch'],drop_first=True,prefix='Parch')\n",
    "final_df = pd.concat([final_df, df_check],axis=1)\n",
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "id": "7e69a114",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "      <th>AgeFare</th>\n",
       "      <th>...</th>\n",
       "      <th>Parch_3</th>\n",
       "      <th>Parch_4</th>\n",
       "      <th>Parch_5</th>\n",
       "      <th>Parch_6</th>\n",
       "      <th>SibSp_1</th>\n",
       "      <th>SibSp_2</th>\n",
       "      <th>SibSp_3</th>\n",
       "      <th>SibSp_4</th>\n",
       "      <th>SibSp_5</th>\n",
       "      <th>SibSp_8</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>159.5000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2708.7654</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>206.0500</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1858.5000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>281.7500</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Q  S    AgeFare  ...  \\\n",
       "0         0       3    1  22.0      1      0   7.2500  0  1   159.5000  ...   \n",
       "1         1       1    0  38.0      1      0  71.2833  0  0  2708.7654  ...   \n",
       "2         1       3    0  26.0      0      0   7.9250  0  1   206.0500  ...   \n",
       "3         1       1    0  35.0      1      0  53.1000  0  1  1858.5000  ...   \n",
       "4         0       3    1  35.0      0      0   8.0500  0  1   281.7500  ...   \n",
       "\n",
       "   Parch_3  Parch_4  Parch_5  Parch_6  SibSp_1  SibSp_2  SibSp_3  SibSp_4  \\\n",
       "0        0        0        0        0        1        0        0        0   \n",
       "1        0        0        0        0        1        0        0        0   \n",
       "2        0        0        0        0        0        0        0        0   \n",
       "3        0        0        0        0        1        0        0        0   \n",
       "4        0        0        0        0        0        0        0        0   \n",
       "\n",
       "   SibSp_5  SibSp_8  \n",
       "0        0        0  \n",
       "1        0        0  \n",
       "2        0        0  \n",
       "3        0        0  \n",
       "4        0        0  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 363,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_check = pd.get_dummies(final_df['SibSp'],drop_first=True,prefix='SibSp')\n",
    "final_df = pd.concat([final_df, df_check],axis=1)\n",
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "id": "0998182f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "      <th>AgeFare</th>\n",
       "      <th>...</th>\n",
       "      <th>Parch_5</th>\n",
       "      <th>Parch_6</th>\n",
       "      <th>SibSp_1</th>\n",
       "      <th>SibSp_2</th>\n",
       "      <th>SibSp_3</th>\n",
       "      <th>SibSp_4</th>\n",
       "      <th>SibSp_5</th>\n",
       "      <th>SibSp_8</th>\n",
       "      <th>Pclass_2</th>\n",
       "      <th>Pclass_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>159.5000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2708.7654</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>206.0500</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1858.5000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>281.7500</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Q  S    AgeFare  ...  \\\n",
       "0         0       3    1  22.0      1      0   7.2500  0  1   159.5000  ...   \n",
       "1         1       1    0  38.0      1      0  71.2833  0  0  2708.7654  ...   \n",
       "2         1       3    0  26.0      0      0   7.9250  0  1   206.0500  ...   \n",
       "3         1       1    0  35.0      1      0  53.1000  0  1  1858.5000  ...   \n",
       "4         0       3    1  35.0      0      0   8.0500  0  1   281.7500  ...   \n",
       "\n",
       "   Parch_5  Parch_6  SibSp_1  SibSp_2  SibSp_3  SibSp_4  SibSp_5  SibSp_8  \\\n",
       "0        0        0        1        0        0        0        0        0   \n",
       "1        0        0        1        0        0        0        0        0   \n",
       "2        0        0        0        0        0        0        0        0   \n",
       "3        0        0        1        0        0        0        0        0   \n",
       "4        0        0        0        0        0        0        0        0   \n",
       "\n",
       "   Pclass_2  Pclass_3  \n",
       "0         0         1  \n",
       "1         0         0  \n",
       "2         0         1  \n",
       "3         0         0  \n",
       "4         0         1  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 364,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_check = pd.get_dummies(final_df['Pclass'],drop_first=True,prefix='Pclass')\n",
    "final_df = pd.concat([final_df, df_check],axis=1)\n",
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 365,
   "id": "6775bccd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "      <th>AgeFare</th>\n",
       "      <th>Parch_1</th>\n",
       "      <th>Parch_2</th>\n",
       "      <th>Parch_3</th>\n",
       "      <th>...</th>\n",
       "      <th>Parch_5</th>\n",
       "      <th>Parch_6</th>\n",
       "      <th>SibSp_1</th>\n",
       "      <th>SibSp_2</th>\n",
       "      <th>SibSp_3</th>\n",
       "      <th>SibSp_4</th>\n",
       "      <th>SibSp_5</th>\n",
       "      <th>SibSp_8</th>\n",
       "      <th>Pclass_2</th>\n",
       "      <th>Pclass_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>159.5000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2708.7654</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>206.0500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1858.5000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>281.7500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Sex   Age     Fare  Q  S    AgeFare  Parch_1  Parch_2  Parch_3  \\\n",
       "0         0    1  22.0   7.2500  0  1   159.5000        0        0        0   \n",
       "1         1    0  38.0  71.2833  0  0  2708.7654        0        0        0   \n",
       "2         1    0  26.0   7.9250  0  1   206.0500        0        0        0   \n",
       "3         1    0  35.0  53.1000  0  1  1858.5000        0        0        0   \n",
       "4         0    1  35.0   8.0500  0  1   281.7500        0        0        0   \n",
       "\n",
       "   ...  Parch_5  Parch_6  SibSp_1  SibSp_2  SibSp_3  SibSp_4  SibSp_5  \\\n",
       "0  ...        0        0        1        0        0        0        0   \n",
       "1  ...        0        0        1        0        0        0        0   \n",
       "2  ...        0        0        0        0        0        0        0   \n",
       "3  ...        0        0        1        0        0        0        0   \n",
       "4  ...        0        0        0        0        0        0        0   \n",
       "\n",
       "   SibSp_8  Pclass_2  Pclass_3  \n",
       "0        0         0         1  \n",
       "1        0         0         0  \n",
       "2        0         0         1  \n",
       "3        0         0         0  \n",
       "4        0         0         1  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 365,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df = final_df.drop([('SibSp')],axis=1)\n",
    "final_df = final_df.drop([('Parch')],axis=1)\n",
    "final_df = final_df.drop([('Pclass')],axis=1)\n",
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 366,
   "id": "866bee7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "in_3 = np.arange(start=0, stop=100, step=3)\n",
    "def age_class(age):\n",
    "    #get age index in 3 by 3 array\n",
    "    ind = int(age // 3)\n",
    "    return in_3[ind]\n",
    "\n",
    "final_df['Age_cluster'] = final_df['Age'].apply(age_class)\n",
    "df_check = pd.get_dummies(final_df['Age_cluster'],drop_first=True,prefix='Age')\n",
    "final_df = pd.concat([final_df, df_check],axis=1)\n",
    "final_df = final_df.drop(['Age'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 367,
   "id": "74138fd4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "in_25 = np.arange(start=final_df['Fare'].min(), stop=final_df['Fare'].max(), step=25)\n",
    "def fare_class(fare):\n",
    "    #get fare index in 25 ++ array\n",
    "    ind = int(fare // 25)\n",
    "    return in_25[ind]\n",
    "\n",
    "final_df['Fare_cluster'] = final_df['Fare'].apply(fare_class)\n",
    "df_check = pd.get_dummies(final_df['Fare_cluster'],drop_first=True,prefix='Fare')\n",
    "final_df = pd.concat([final_df, df_check],axis=1)\n",
    "final_df = final_df.drop(['Fare'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "id": "954978ac",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "in_1 = np.arange(start=0, stop=2500, step=150)\n",
    "in_2 = np.arange(start=2500, stop=7500, step=500)\n",
    "in_3 = np.arange(start=7500, stop=final_df['AgeFare'].max(), step=2500)\n",
    "in_agefare = np.concatenate((in_1,in_2,in_3),axis=None)\n",
    "def agefare_class(Agefare):\n",
    "    #get fare index in 25 ++ array\n",
    "    if Agefare <= 2500: \n",
    "        ind = int(Agefare // 150)\n",
    "    elif Agefare <= 7500:\n",
    "        ind = int(Agefare // 500)\n",
    "    else:\n",
    "        ind = int(Agefare // 2500)\n",
    "    return in_agefare[ind]\n",
    "\n",
    "final_df['AgeFare_cluster'] = final_df['AgeFare'].apply(agefare_class)\n",
    "df_check = pd.get_dummies(final_df['AgeFare_cluster'],drop_first=True,prefix='Age_Fare')\n",
    "final_df = pd.concat([final_df, df_check],axis=1)\n",
    "final_df = final_df.drop(['AgeFare'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 404,
   "id": "761e826f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "      <th>Parch_1</th>\n",
       "      <th>Parch_2</th>\n",
       "      <th>Parch_3</th>\n",
       "      <th>Parch_4</th>\n",
       "      <th>Parch_5</th>\n",
       "      <th>Parch_6</th>\n",
       "      <th>...</th>\n",
       "      <th>Age_Fare_1050.0</th>\n",
       "      <th>Age_Fare_1200.0</th>\n",
       "      <th>Age_Fare_1350.0</th>\n",
       "      <th>Age_Fare_1500.0</th>\n",
       "      <th>Age_Fare_1650.0</th>\n",
       "      <th>Age_Fare_1800.0</th>\n",
       "      <th>Age_Fare_1950.0</th>\n",
       "      <th>Age_Fare_2100.0</th>\n",
       "      <th>Age_Fare_2250.0</th>\n",
       "      <th>Age_Fare_2400.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 69 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Sex  Q  S  Parch_1  Parch_2  Parch_3  Parch_4  Parch_5  Parch_6  \\\n",
       "0         0    1  0  1        0        0        0        0        0        0   \n",
       "1         1    0  0  0        0        0        0        0        0        0   \n",
       "2         1    0  0  1        0        0        0        0        0        0   \n",
       "3         1    0  0  1        0        0        0        0        0        0   \n",
       "4         0    1  0  1        0        0        0        0        0        0   \n",
       "\n",
       "   ...  Age_Fare_1050.0  Age_Fare_1200.0  Age_Fare_1350.0  Age_Fare_1500.0  \\\n",
       "0  ...                0                0                0                0   \n",
       "1  ...                0                0                0                0   \n",
       "2  ...                0                0                0                0   \n",
       "3  ...                0                0                0                0   \n",
       "4  ...                0                0                0                0   \n",
       "\n",
       "   Age_Fare_1650.0  Age_Fare_1800.0  Age_Fare_1950.0  Age_Fare_2100.0  \\\n",
       "0                0                0                0                0   \n",
       "1                0                0                0                0   \n",
       "2                0                0                0                0   \n",
       "3                0                1                0                0   \n",
       "4                0                0                0                0   \n",
       "\n",
       "   Age_Fare_2250.0  Age_Fare_2400.0  \n",
       "0                0                0  \n",
       "1                0                0  \n",
       "2                0                0  \n",
       "3                0                0  \n",
       "4                0                0  \n",
       "\n",
       "[5 rows x 69 columns]"
      ]
     },
     "execution_count": 404,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# final_df['AgeFare'].plot(x='AgeFare',kind='hist')\n",
    "# print(final_df['AgeFare'].min())\n",
    "# print(final_df['AgeFare'].max())\n",
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 372,
   "id": "d3e6a2db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Survived', 'Sex', 'Q', 'S', 'Parch_1', 'Parch_2', 'Parch_3', 'Parch_4',\n",
       "       'Parch_5', 'Parch_6', 'SibSp_1', 'SibSp_2', 'SibSp_3', 'SibSp_4',\n",
       "       'SibSp_5', 'SibSp_8', 'Pclass_2', 'Pclass_3', 'Age_3', 'Age_6', 'Age_9',\n",
       "       'Age_12', 'Age_15', 'Age_18', 'Age_21', 'Age_24', 'Age_27', 'Age_30',\n",
       "       'Age_33', 'Age_36', 'Age_39', 'Age_42', 'Age_45', 'Age_48', 'Age_51',\n",
       "       'Age_54', 'Age_57', 'Age_60', 'Age_63', 'Age_66', 'Age_69', 'Age_72',\n",
       "       'Age_78', 'Fare_25.0', 'Fare_50.0', 'Fare_75.0', 'Fare_100.0',\n",
       "       'Fare_125.0', 'Fare_150.0', 'Fare_200.0', 'Fare_225.0', 'Fare_250.0',\n",
       "       'Fare_500.0', 'Age_Fare_150.0', 'Age_Fare_300.0', 'Age_Fare_450.0',\n",
       "       'Age_Fare_600.0', 'Age_Fare_750.0', 'Age_Fare_900.0', 'Age_Fare_1050.0',\n",
       "       'Age_Fare_1200.0', 'Age_Fare_1350.0', 'Age_Fare_1500.0',\n",
       "       'Age_Fare_1650.0', 'Age_Fare_1800.0', 'Age_Fare_1950.0',\n",
       "       'Age_Fare_2100.0', 'Age_Fare_2250.0', 'Age_Fare_2400.0'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 372,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df = final_df.drop(['Age_cluster'],axis=1)\n",
    "final_df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b219450f",
   "metadata": {},
   "source": [
    "## Testing importing TF(Keras) logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 373,
   "id": "c48d28ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df.to_csv('final_df_binary.csv',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 374,
   "id": "1ec5c8e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = final_df['Survived']\n",
    "x = final_df.drop(['Survived'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 375,
   "id": "e42fc025",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=101)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "2ca0a9dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_sk_log = LogisticRegression()\n",
    "model_sk_log.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "648f3f12",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_test = model_sk_log.predict(X_test)\n",
    "pred_train = model_sk_log.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "b016ee50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.79      0.92      0.85        99\n",
      "           1       0.88      0.70      0.78        80\n",
      "\n",
      "    accuracy                           0.82       179\n",
      "   macro avg       0.83      0.81      0.81       179\n",
      "weighted avg       0.83      0.82      0.82       179\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,pred_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "6566e29b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[91  8]\n",
      " [24 56]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test,pred_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "f9e98443",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 82.122905\n"
     ]
    }
   ],
   "source": [
    "print('Train Accuracy: %f'%(np.mean(pred == y_test) * 100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "9997aa0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error cv:    0.179\n",
      "error train: 0.190\n"
     ]
    }
   ],
   "source": [
    "error_cv = eval_err(y_test, pred_test)\n",
    "error_train = eval_err(y_train, pred_train)\n",
    "print(f\"error cv:    {error_cv :0.3f}\")\n",
    "print(f\"error train: {error_train :0.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "618af669",
   "metadata": {},
   "source": [
    "## Testing building Log Reg model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 393,
   "id": "af203c9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = X_train.to_numpy()\n",
    "y_train = y_train.to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "efd565bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "b0a31e47",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test = scaler.fit_transform(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "417474d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Create sigmoid function\n",
    "## Compute loss function, sum to get cost (add regularization)\n",
    "## Add gradient descent calculation \n",
    "## Updating the weights\n",
    "## Check pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "52f4dcdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid(z):\n",
    "\n",
    "    calc = math.e**-z\n",
    "    g = 1 / (1 + calc)\n",
    "\n",
    "    return g"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23d7778a",
   "metadata": {},
   "source": [
    "<a name=\"2.4\"></a>\n",
    "### 2.4 Cost function for logistic regression\n",
    "\n",
    "In this section, you will implement the cost function for logistic regression.\n",
    "\n",
    "<a name='ex-02'></a>\n",
    "### Exercise 2\n",
    "\n",
    "Please complete the `compute_cost` function using the equations below.\n",
    "\n",
    "Recall that for logistic regression, the cost function is of the form \n",
    "\n",
    "$$ J(\\mathbf{w},b) = \\frac{1}{m}\\sum_{i=0}^{m-1} \\left[ loss(f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}), y^{(i)}) \\right] \\tag{1}$$\n",
    "\n",
    "where\n",
    "* m is the number of training examples in the dataset\n",
    "\n",
    "\n",
    "* $loss(f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}), y^{(i)})$ is the cost for a single data point, which is - \n",
    "\n",
    "    $$loss(f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}), y^{(i)}) = (-y^{(i)} \\log\\left(f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right) - \\left( 1 - y^{(i)}\\right) \\log \\left( 1 - f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right) \\tag{2}$$\n",
    "    \n",
    "    \n",
    "*  $f_{\\mathbf{w},b}(\\mathbf{x}^{(i)})$ is the model's prediction, while $y^{(i)}$, which is the actual label\n",
    "\n",
    "*  $f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}) = g(\\mathbf{w} \\cdot \\mathbf{x^{(i)}} + b)$ where function $g$ is the sigmoid function.\n",
    "    * It might be helpful to first calculate an intermediate variable $z_{\\mathbf{w},b}(\\mathbf{x}^{(i)}) = \\mathbf{w} \\cdot \\mathbf{x^{(i)}} + b = w_0x^{(i)}_0 + ... + w_{n-1}x^{(i)}_{n-1} + b$ where $n$ is the number of features, before calculating $f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}) = g(z_{\\mathbf{w},b}(\\mathbf{x}^{(i)}))$\n",
    "\n",
    "Note:\n",
    "* As you are doing this, remember that the variables `X_train` and `y_train` are not scalar values but matrices of shape ($m, n$) and ($𝑚$,1) respectively, where  $𝑛$ is the number of features and $𝑚$ is the number of training examples.\n",
    "* You can use the sigmoid function that you implemented above for this part."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "036bcd36",
   "metadata": {},
   "outputs": [],
   "source": [
    "def loss_calc(X, y, w, b, lambda_):\n",
    "    train_ex, featur = X.shape\n",
    "    total_cost = 0 \n",
    "    \n",
    "    for i in range(train_ex):\n",
    "        \n",
    "        sig_i = sigmoid(np.dot(X[i],w) + b)\n",
    "        check = (- y[i] * np.log(sig_i)) - ((1 - y[i]) * np.log(1 - sig_i))\n",
    "        total_cost += check\n",
    "    \n",
    "    total_cost = total_cost / train_ex\n",
    "    \n",
    "    reg = 0\n",
    "    for j in range(featur):\n",
    "        reg += w[j]**2\n",
    "    \n",
    "    reg = lambda_/(2*featur) * reg\n",
    "    \n",
    "    final_cost = total_cost + reg\n",
    "    \n",
    "    return final_cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "419145b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradient_descent(X, y, w, b, lambda_):\n",
    "    train_ex, featur = X.shape\n",
    "    \n",
    "    dj_dw = np.zeros(w.shape)\n",
    "    dj_db = 0.\n",
    "        \n",
    "    for i in range(train_ex):\n",
    "        pred = sigmoid(np.dot(X[i], w) + b)\n",
    "        dj_db += pred - y[i]\n",
    "        \n",
    "        for j in range(featur):\n",
    "            dj_dw[j] += (pred - y[i]) * X[i][j]\n",
    "    \n",
    "    dj_db = dj_db / featur\n",
    "    dj_dw = dj_dw / featur\n",
    "    \n",
    "    for i in range(featur):\n",
    "        reg = lambda_ / featur * w[j]\n",
    "        dj_dw[j] += reg\n",
    "    \n",
    "    return dj_dw, dj_db"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f4d65c38",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_gradient(X, y, w_in, b_in, cost_func, gradient_func, alpha, iterat, lambda_):\n",
    "    examples = X.shape[0]\n",
    "    Cost_Journey = []\n",
    "    \n",
    "    for i in range(iterat):\n",
    "        dj_dw, dj_db = gradient_func(X, y, w_in, b_in, lambda_)\n",
    "        \n",
    "        w_in = w_in - alpha * dj_dw\n",
    "        b_in = b_in - alpha * dj_db\n",
    "        \n",
    "        if i % (iterat/10) == 0 or i == (iterat-1):\n",
    "            cost = cost_func(X, y, w_in, b_in, lambda_)\n",
    "            Cost_Journey.append(cost)\n",
    "            print(f\"Iteration {i:4}: Cost {float(Cost_Journey[-1]):8.2f}   \")\n",
    "    \n",
    "    return w_in, b_in, Cost_Journey"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "8a07b079",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration    0: Cost     0.95   \n",
      "Iteration 1000: Cost     0.44   \n",
      "Iteration 2000: Cost     0.44   \n",
      "Iteration 3000: Cost     0.44   \n",
      "Iteration 4000: Cost     0.44   \n",
      "Iteration 5000: Cost     0.44   \n",
      "Iteration 6000: Cost     0.44   \n",
      "Iteration 7000: Cost     0.44   \n",
      "Iteration 8000: Cost     0.44   \n",
      "Iteration 9000: Cost     0.44   \n",
      "Iteration 9999: Cost     0.44   \n"
     ]
    }
   ],
   "source": [
    "alpha = 0.001\n",
    "iterations = 10000\n",
    "lambda_ = 0.01\n",
    "\n",
    "np.random.seed(1)\n",
    "i_w = np.random.rand(X_train.shape[1])-0.5\n",
    "i_b = 1.\n",
    "\n",
    "w,b, cost = compute_gradient(X_train, y_train, i_w, i_b, loss_calc, gradient_descent, alpha, iterations, lambda_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5c5ab741",
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(X, w, b):\n",
    "    m,n = X.shape\n",
    "    p = np.zeros(m)\n",
    "    \n",
    "    for i in range(m):\n",
    "        kick = np.dot(X[i], w) + b\n",
    "        \n",
    "        if kick >= 0.5:\n",
    "            p[i] = 1\n",
    "        else:\n",
    "            p[i] = 0\n",
    "    \n",
    "    return p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "6f20baf5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 81.460674\n"
     ]
    }
   ],
   "source": [
    "p_train = predict(X_train, w,b)\n",
    "print('Train Accuracy: %f'%(np.mean(p_train == y_train) * 100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "a9737cec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 81.564246\n"
     ]
    }
   ],
   "source": [
    "p = predict(X_test, w,b)\n",
    "print('Train Accuracy: %f'%(np.mean(p == y_test) * 100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "ff287cfd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error cv:    0.184\n",
      "error train: 0.185\n"
     ]
    }
   ],
   "source": [
    "error_cv = eval_err(y_test, p)\n",
    "error_train = eval_err(y_train, p_train)\n",
    "print(f\"error cv:    {error_cv :0.3f}\")\n",
    "print(f\"error train: {error_train :0.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68b44584",
   "metadata": {},
   "source": [
    "## Result of Self-Made logistic Reg\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "be50e572",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.75      0.99      0.86        99\n",
      "           1       0.98      0.60      0.74        80\n",
      "\n",
      "    accuracy                           0.82       179\n",
      "   macro avg       0.87      0.79      0.80       179\n",
      "weighted avg       0.85      0.82      0.81       179\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,p))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "ff570550",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[98  1]\n",
      " [32 48]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test,p))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96d3364f",
   "metadata": {},
   "source": [
    "## Result of SKlearn logistic Reg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "7d8a87b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.89      0.85        99\n",
      "           1       0.84      0.74      0.79        80\n",
      "\n",
      "    accuracy                           0.82       179\n",
      "   macro avg       0.83      0.81      0.82       179\n",
      "weighted avg       0.82      0.82      0.82       179\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "1e0f772a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[88 11]\n",
      " [21 59]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test,pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4836d248",
   "metadata": {},
   "source": [
    "## Deep NN Model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "579cddc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Import the TF package to test the performance\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Activation,Dropout\n",
    "from tensorflow.keras.losses import BinaryCrossentropy\n",
    "from tensorflow.keras.models import load_model\n",
    "from tensorflow.keras.callbacks import EarlyStopping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "id": "77fac65a",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential(\n",
    "    [\n",
    "        tf.keras.Input(shape=(8,)),\n",
    "        Dense(units=32, activation='sigmoid'),\n",
    "        Dense(units=16, activation='sigmoid'),\n",
    "        Dense(units=1, activation='sigmoid'),\n",
    "    ], name=\"xx_model_NN_tit\")\n",
    "\n",
    "model.compile(optimizer=tf.keras.optimizers.Adam(0.001), loss=BinaryCrossentropy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "id": "9a63fcd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "early_stop = EarlyStopping(monitor='val_loss', mode='min', patience=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "id": "1c5e62d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.6439 - val_loss: 0.6743\n",
      "Epoch 2/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.6325 - val_loss: 0.6667\n",
      "Epoch 3/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.6217 - val_loss: 0.6555\n",
      "Epoch 4/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.6108 - val_loss: 0.6342\n",
      "Epoch 5/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.5957 - val_loss: 0.6226\n",
      "Epoch 6/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.5809 - val_loss: 0.6042\n",
      "Epoch 7/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.5659 - val_loss: 0.5865\n",
      "Epoch 8/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.5495 - val_loss: 0.5679\n",
      "Epoch 9/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.5345 - val_loss: 0.5502\n",
      "Epoch 10/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.5208 - val_loss: 0.5399\n",
      "Epoch 11/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.5075 - val_loss: 0.5216\n",
      "Epoch 12/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4959 - val_loss: 0.5090\n",
      "Epoch 13/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4864 - val_loss: 0.4967\n",
      "Epoch 14/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4779 - val_loss: 0.4937\n",
      "Epoch 15/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4711 - val_loss: 0.4824\n",
      "Epoch 16/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4662 - val_loss: 0.4798\n",
      "Epoch 17/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4618 - val_loss: 0.4727\n",
      "Epoch 18/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4584 - val_loss: 0.4680\n",
      "Epoch 19/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4556 - val_loss: 0.4676\n",
      "Epoch 20/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4530 - val_loss: 0.4662\n",
      "Epoch 21/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4515 - val_loss: 0.4623\n",
      "Epoch 22/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4499 - val_loss: 0.4596\n",
      "Epoch 23/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4489 - val_loss: 0.4596\n",
      "Epoch 24/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4485 - val_loss: 0.4584\n",
      "Epoch 25/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4466 - val_loss: 0.4529\n",
      "Epoch 26/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4466 - val_loss: 0.4537\n",
      "Epoch 27/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4457 - val_loss: 0.4506\n",
      "Epoch 28/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4451 - val_loss: 0.4555\n",
      "Epoch 29/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4444 - val_loss: 0.4511\n",
      "Epoch 30/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4444 - val_loss: 0.4603\n",
      "Epoch 31/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4440 - val_loss: 0.4499\n",
      "Epoch 32/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4428 - val_loss: 0.4535\n",
      "Epoch 33/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4423 - val_loss: 0.4512\n",
      "Epoch 34/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4424 - val_loss: 0.4500\n",
      "Epoch 35/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4423 - val_loss: 0.4501\n",
      "Epoch 36/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4420 - val_loss: 0.4469\n",
      "Epoch 37/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4413 - val_loss: 0.4513\n",
      "Epoch 38/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4413 - val_loss: 0.4504\n",
      "Epoch 39/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4410 - val_loss: 0.4492\n",
      "Epoch 40/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4408 - val_loss: 0.4547\n",
      "Epoch 41/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4403 - val_loss: 0.4501\n",
      "Epoch 42/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4399 - val_loss: 0.4484\n",
      "Epoch 43/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4402 - val_loss: 0.4464\n",
      "Epoch 44/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4395 - val_loss: 0.4475\n",
      "Epoch 45/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4398 - val_loss: 0.4436\n",
      "Epoch 46/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4392 - val_loss: 0.4468\n",
      "Epoch 47/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4386 - val_loss: 0.4496\n",
      "Epoch 48/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4386 - val_loss: 0.4457\n",
      "Epoch 49/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4380 - val_loss: 0.4474\n",
      "Epoch 50/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4392 - val_loss: 0.4438\n",
      "Epoch 51/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4379 - val_loss: 0.4485\n",
      "Epoch 52/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4385 - val_loss: 0.4480\n",
      "Epoch 53/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4386 - val_loss: 0.4423\n",
      "Epoch 54/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4379 - val_loss: 0.4464\n",
      "Epoch 55/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4377 - val_loss: 0.4442\n",
      "Epoch 56/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4366 - val_loss: 0.4467\n",
      "Epoch 57/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4369 - val_loss: 0.4465\n",
      "Epoch 58/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4373 - val_loss: 0.4385\n",
      "Epoch 59/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4369 - val_loss: 0.4471\n",
      "Epoch 60/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4357 - val_loss: 0.4430\n",
      "Epoch 61/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4368 - val_loss: 0.4370\n",
      "Epoch 62/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4359 - val_loss: 0.4475\n",
      "Epoch 63/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4355 - val_loss: 0.4435\n",
      "Epoch 64/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4354 - val_loss: 0.4398\n",
      "Epoch 65/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4350 - val_loss: 0.4421\n",
      "Epoch 66/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4347 - val_loss: 0.4413\n",
      "Epoch 67/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4347 - val_loss: 0.4408\n",
      "Epoch 68/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4344 - val_loss: 0.4384\n",
      "Epoch 69/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4339 - val_loss: 0.4417\n",
      "Epoch 70/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4343 - val_loss: 0.4401\n",
      "Epoch 71/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4337 - val_loss: 0.4388\n",
      "Epoch 72/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4336 - val_loss: 0.4393\n",
      "Epoch 73/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4333 - val_loss: 0.4402\n",
      "Epoch 74/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4330 - val_loss: 0.4386\n",
      "Epoch 75/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4331 - val_loss: 0.4375\n",
      "Epoch 76/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4326 - val_loss: 0.4396\n",
      "Epoch 77/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4320 - val_loss: 0.4369\n",
      "Epoch 78/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4323 - val_loss: 0.4384\n",
      "Epoch 79/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4321 - val_loss: 0.4371\n",
      "Epoch 80/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4326 - val_loss: 0.4371\n",
      "Epoch 81/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4315 - val_loss: 0.4402\n",
      "Epoch 82/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4311 - val_loss: 0.4360\n",
      "Epoch 83/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4320 - val_loss: 0.4350\n",
      "Epoch 84/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4316 - val_loss: 0.4417\n",
      "Epoch 85/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4307 - val_loss: 0.4344\n",
      "Epoch 86/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4309 - val_loss: 0.4379\n",
      "Epoch 87/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4304 - val_loss: 0.4357\n",
      "Epoch 88/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4307 - val_loss: 0.4354\n",
      "Epoch 89/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4309 - val_loss: 0.4374\n",
      "Epoch 90/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4301 - val_loss: 0.4323\n",
      "Epoch 91/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4295 - val_loss: 0.4390\n",
      "Epoch 92/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4295 - val_loss: 0.4354\n",
      "Epoch 93/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4296 - val_loss: 0.4334\n",
      "Epoch 94/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4295 - val_loss: 0.4359\n",
      "Epoch 95/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4296 - val_loss: 0.4357\n",
      "Epoch 96/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4289 - val_loss: 0.4358\n",
      "Epoch 97/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4283 - val_loss: 0.4343\n",
      "Epoch 98/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4282 - val_loss: 0.4323\n",
      "Epoch 99/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4280 - val_loss: 0.4337\n",
      "Epoch 100/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4279 - val_loss: 0.4346\n",
      "Epoch 101/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4277 - val_loss: 0.4337\n",
      "Epoch 102/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4282 - val_loss: 0.4377\n",
      "Epoch 103/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4276 - val_loss: 0.4367\n",
      "Epoch 104/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4273 - val_loss: 0.4350\n",
      "Epoch 105/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4276 - val_loss: 0.4319\n",
      "Epoch 106/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4269 - val_loss: 0.4363\n",
      "Epoch 107/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4268 - val_loss: 0.4354\n",
      "Epoch 108/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4265 - val_loss: 0.4309\n",
      "Epoch 109/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4265 - val_loss: 0.4337\n",
      "Epoch 110/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4263 - val_loss: 0.4324\n",
      "Epoch 111/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4265 - val_loss: 0.4358\n",
      "Epoch 112/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4259 - val_loss: 0.4311\n",
      "Epoch 113/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4267 - val_loss: 0.4281\n",
      "Epoch 114/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4259 - val_loss: 0.4340\n",
      "Epoch 115/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4259 - val_loss: 0.4379\n",
      "Epoch 116/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4254 - val_loss: 0.4285\n",
      "Epoch 117/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4257 - val_loss: 0.4273\n",
      "Epoch 118/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4250 - val_loss: 0.4292\n",
      "Epoch 119/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4245 - val_loss: 0.4310\n",
      "Epoch 120/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4249 - val_loss: 0.4278\n",
      "Epoch 121/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4244 - val_loss: 0.4345\n",
      "Epoch 122/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4248 - val_loss: 0.4279\n",
      "Epoch 123/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4240 - val_loss: 0.4349\n",
      "Epoch 124/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4245 - val_loss: 0.4324\n",
      "Epoch 125/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4246 - val_loss: 0.4362\n",
      "Epoch 126/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4242 - val_loss: 0.4248\n",
      "Epoch 127/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4238 - val_loss: 0.4301\n",
      "Epoch 128/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4233 - val_loss: 0.4310\n",
      "Epoch 129/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4232 - val_loss: 0.4291\n",
      "Epoch 130/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4229 - val_loss: 0.4279\n",
      "Epoch 131/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4231 - val_loss: 0.4285\n",
      "Epoch 132/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4228 - val_loss: 0.4291\n",
      "Epoch 133/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4228 - val_loss: 0.4261\n",
      "Epoch 134/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4225 - val_loss: 0.4281\n",
      "Epoch 135/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4224 - val_loss: 0.4266\n",
      "Epoch 136/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4223 - val_loss: 0.4294\n",
      "Epoch 137/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4220 - val_loss: 0.4293\n",
      "Epoch 138/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4218 - val_loss: 0.4270\n",
      "Epoch 139/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4223 - val_loss: 0.4252\n",
      "Epoch 140/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4218 - val_loss: 0.4271\n",
      "Epoch 141/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4213 - val_loss: 0.4262\n",
      "Epoch 142/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4214 - val_loss: 0.4266\n",
      "Epoch 143/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4216 - val_loss: 0.4274\n",
      "Epoch 144/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4210 - val_loss: 0.4264\n",
      "Epoch 145/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4208 - val_loss: 0.4286\n",
      "Epoch 146/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4220 - val_loss: 0.4277\n",
      "Epoch 147/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4205 - val_loss: 0.4283\n",
      "Epoch 148/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4205 - val_loss: 0.4291\n",
      "Epoch 149/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4208 - val_loss: 0.4259\n",
      "Epoch 150/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4206 - val_loss: 0.4280\n",
      "Epoch 151/1000\n",
      "23/23 [==============================] - 0s 1ms/step - loss: 0.4206 - val_loss: 0.4254\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1ea370e03d0>"
      ]
     },
     "execution_count": 340,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x=X_train, y=y_train, epochs=1000, validation_data=(X_test, y_test), callbacks=[early_stop])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "id": "25e92aca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 309,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "loss_mol = pd.DataFrame(model.history.history)\n",
    "loss_mol.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "id": "2753d203",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 26ms/step\n",
      "[[0.20287956]]\n"
     ]
    }
   ],
   "source": [
    "pred_0 = model.predict(X_train[0].reshape(1,8))\n",
    "print(pred_0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8f13cfca",
   "metadata": {},
   "outputs": [],
   "source": [
    "def NN_pred(yhat):\n",
    "    if yhat >= 0.5:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5ba39d82",
   "metadata": {},
   "outputs": [],
   "source": [
    "def eval_err(y, yhat):\n",
    "    m = y.shape[0]\n",
    "    incorrect = 0\n",
    "    y = y.tolist()\n",
    "    for i in range(m):\n",
    "        if yhat[i] != y[i]:\n",
    "            incorrect += 1\n",
    "            \n",
    "    incorrect = incorrect / m\n",
    "    \n",
    "    return incorrect "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "id": "802f9a61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6/6 [==============================] - 0s 600us/step - loss: 0.4254\n",
      "0.42539092898368835\n"
     ]
    }
   ],
   "source": [
    "results = model.evaluate(X_test, y_test)\n",
    "print(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "id": "75fea1cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6/6 [==============================] - 0s 400us/step\n"
     ]
    }
   ],
   "source": [
    "prediction_nn = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "28dde994",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pred_output(prediction):\n",
    "    ex = prediction.shape[0]\n",
    "    output = []\n",
    "    for i in range(ex):\n",
    "        output.append(NN_pred(prediction[i]))\n",
    "    \n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "id": "3996aabf",
   "metadata": {},
   "outputs": [],
   "source": [
    "output = pred_output(prediction_nn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "id": "95147f5d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 82.681564\n"
     ]
    }
   ],
   "source": [
    "print('Train Accuracy: %f'%(np.mean(output == y_test) * 100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 346,
   "id": "61c0d7d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23/23 [==============================] - 0s 409us/step\n"
     ]
    }
   ],
   "source": [
    "output_train = pred_output(model.predict(X_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 347,
   "id": "1681e48f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error cv:    0.173\n",
      "error train: 0.180\n"
     ]
    }
   ],
   "source": [
    "error_cv = eval_err(y_test, output)\n",
    "error_train = eval_err(y_train, output_train)\n",
    "print(f\"error cv:    {error_cv :0.3f}\")\n",
    "print(f\"error train: {error_train :0.3f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 348,
   "id": "9ccd54ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.78      0.95      0.86        99\n",
      "           1       0.92      0.68      0.78        80\n",
      "\n",
      "    accuracy                           0.83       179\n",
      "   macro avg       0.85      0.81      0.82       179\n",
      "weighted avg       0.84      0.83      0.82       179\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, output))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 349,
   "id": "6fd9811d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[94  5]\n",
      " [26 54]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test, output))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "id": "a4800eee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"xx_model_NN_tit\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " dense_27 (Dense)            (None, 32)                288       \n",
      "                                                                 \n",
      " dense_28 (Dense)            (None, 16)                528       \n",
      "                                                                 \n",
      " dense_29 (Dense)            (None, 1)                 17        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 833\n",
      "Trainable params: 833\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "id": "6f935fee",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save('Model_tf_NN_tit.h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b011009",
   "metadata": {},
   "source": [
    "## Building a Deep NN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "id": "017a25b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create code that runs per layer:\n",
    "    #Every node uses its weights and np.dots(x, w) + b // Uses the result in the sigmoid function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "b0d55124",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.49876844632347345"
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sigmoid(-0.0049262246684229904)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 351,
   "id": "5140b873",
   "metadata": {},
   "outputs": [],
   "source": [
    "[l1, l2, l3] = model.layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 352,
   "id": "24e9cd4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "W1_tmp, b1_tmp = l1.get_weights()\n",
    "W2_tmp, b2_tmp = l2.get_weights()\n",
    "W3_tmp, b3_tmp = l3.get_weights()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 353,
   "id": "eaf9b1da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8, 32)\n",
      "(32, 16)\n",
      "(16, 1)\n",
      "(712, 8)\n",
      "(179, 8)\n"
     ]
    }
   ],
   "source": [
    "print(W1_tmp.shape)\n",
    "print(W2_tmp.shape)\n",
    "print(W3_tmp.shape)\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 354,
   "id": "326691a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def layers(a_in, W, b, g):\n",
    "    #Use the input a_in\n",
    "    units = W.shape[1]\n",
    "    a_out = np.zeros(units)\n",
    "    \n",
    "    for i in range(units):\n",
    "        res = np.dot(W[:,i], a_in) + b[i]\n",
    "        a_out[i] = g(res)\n",
    "        \n",
    "    return a_out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 355,
   "id": "7684e985",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sequential(x, W1, b1, W2, b2, W3, b3, g):\n",
    "    a1 = layers(x, W1, b1, g)\n",
    "    a2 = layers(a1, W2, b2, g)\n",
    "    a3 = layers(a2, W3, b3, g)\n",
    "    \n",
    "    return a3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "id": "64685435",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_nn_built(X):\n",
    "    ## Get No examples to run prediction\n",
    "    examples = X.shape[0]\n",
    "    prediction_nn_built = np.zeros(examples)\n",
    "    \n",
    "    for i in range(examples):\n",
    "        ## Iterate over all examples and add it to prediction\n",
    "        prob = sequential(X[i], W1_tmp, b1_tmp, W2_tmp, b2_tmp, W3_tmp, b3_tmp, g=sigmoid)\n",
    "        \n",
    "        if prob >= 0.5:\n",
    "            prob = 1\n",
    "        else:\n",
    "            prob = 0\n",
    "            \n",
    "        prediction_nn_built[i] = prob\n",
    "        \n",
    "    return prediction_nn_built"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 373,
   "id": "5dcbb701",
   "metadata": {},
   "outputs": [],
   "source": [
    "#prediction_xn = sequential(X_train[0], W1_tmp, b1_tmp, W2_tmp, b2_tmp, W3_tmp, b3_tmp, W4_tmp, b4_tmp, g=sigmoid)\n",
    "#print(prediction_xn)\n",
    "pred_nn_built = run_nn_built(X_train)\n",
    "pred_nn_built_test = run_nn_built(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 361,
   "id": "ab7add5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error cv:    0.173\n",
      "error train: 0.180\n"
     ]
    }
   ],
   "source": [
    "error_cv = eval_err(y_test, pred_nn_built_test)\n",
    "error_train = eval_err(y_train, pred_nn_built)\n",
    "print(f\"error cv:    {error_cv :0.3f}\")\n",
    "print(f\"error train: {error_train :0.3f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "id": "23527b4a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 82.681564\n"
     ]
    }
   ],
   "source": [
    "print('Train Accuracy: %f'%(np.mean(pred_nn_built_test == y_test) * 100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "id": "25e09920",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.78      0.95      0.86        99\n",
      "           1       0.92      0.68      0.78        80\n",
      "\n",
      "    accuracy                           0.83       179\n",
      "   macro avg       0.85      0.81      0.82       179\n",
      "weighted avg       0.84      0.83      0.82       179\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, pred_nn_built_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 365,
   "id": "99982349",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[94  5]\n",
      " [26 54]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test, pred_nn_built_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c27387e6",
   "metadata": {},
   "source": [
    "## Improving the calculation time using matmul instead of np.dot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 367,
   "id": "32a952c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def layers_matmul(a_in, W, b, g):\n",
    "    #Use the input a_in\n",
    "    \n",
    "    res = np.matmul(a_in, W) + b\n",
    "    a_out[i] = g(res)\n",
    "        \n",
    "    return a_out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "id": "9b6704e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sequential_matmul(x, W1, b1, W2, b2, W3, b3, g):\n",
    "    a1 = layers_matmul(x, W1, b1, g)\n",
    "    a2 = layers_matmul(a1, W2, b2, g)\n",
    "    a3 = layers_matmul(a2, W3, b3, g)\n",
    "    \n",
    "    return a3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 370,
   "id": "8a0f5edf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_nn_built_matmul(X):\n",
    "    ## Get No examples to run prediction\n",
    "    examples = X.shape[0]\n",
    "    prediction_nn_built = np.zeros(examples)\n",
    "    \n",
    "    for i in range(examples):\n",
    "        ## Iterate over all examples and add it to prediction\n",
    "        prob = sequential_matmul(X[i], W1_tmp, b1_tmp, W2_tmp, b2_tmp, W3_tmp, b3_tmp, g=sigmoid)\n",
    "        \n",
    "        if prob >= 0.5:\n",
    "            prob = 1\n",
    "        else:\n",
    "            prob = 0\n",
    "            \n",
    "        prediction_nn_built[i] = prob\n",
    "        \n",
    "    return prediction_nn_built"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 375,
   "id": "12123bff",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_nn_built_matmul = run_nn_built(X_train)\n",
    "pred_nn_built_test_matmul = run_nn_built(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "id": "415490a1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error cv:    0.173\n",
      "error train: 0.180\n"
     ]
    }
   ],
   "source": [
    "error_cv = eval_err(y_test, pred_nn_built_test_matmul)\n",
    "error_train = eval_err(y_train, pred_nn_built_matmul)\n",
    "print(f\"error cv:    {error_cv :0.3f}\")\n",
    "print(f\"error train: {error_train :0.3f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "id": "9558e794",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 82.681564\n"
     ]
    }
   ],
   "source": [
    "print('Train Accuracy: %f'%(np.mean(pred_nn_built_test_matmul == y_test) * 100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 386,
   "id": "7feae30a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8268156424581006"
      ]
     },
     "execution_count": 386,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test, pred_nn_built_test_matmul)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9a656de",
   "metadata": {},
   "source": [
    "## Using XGBoost"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f077a1f4",
   "metadata": {},
   "source": [
    "Reference:\n",
    "https://towardsdatascience.com/beginners-guide-to-xgboost-for-classification-problems-50f75aac5390"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "id": "ffe37b7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost as xgb\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "id": "afeb0f3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "xgb_model = xgb.XGBClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "id": "d4156c9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "xgb_model.fit(X_train, y_train)\n",
    "pred_xgb_model = xgb_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 378,
   "id": "75e31ea2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8212290502793296\n",
      "Train Accuracy: 82.122905\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y_test, pred_xgb_model))\n",
    "print('Train Accuracy: %f'%(np.mean(pred_xgb_model == y_test) * 100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "id": "7cf0158d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n",
       "              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,\n",
       "              early_stopping_rounds=None, enable_categorical=False,\n",
       "              eval_metric=None, gamma=0, gpu_id=-1, grow_policy='depthwise',\n",
       "              importance_type=None, interaction_constraints='',\n",
       "              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,\n",
       "              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,\n",
       "              missing=nan, monotone_constraints='()', n_estimators=100,\n",
       "              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,\n",
       "              reg_alpha=0, reg_lambda=1, ...)"
      ]
     },
     "execution_count": 379,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgb_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "id": "049638e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {\n",
    "    \"max_depth\": [3, 4, 5, 7],\n",
    "    \"learning_rate\": [0.1, 0.05, 0.01],\n",
    "    \"gamma\": [0, 0.25, 1],\n",
    "    \"reg_lambda\": [0, 1, 10],\n",
    "    \"scale_pos_weight\": [1, 3, 5],\n",
    "    \"subsample\": [0.8],\n",
    "    \"colsample_bytree\": [0.5],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 382,
   "id": "5ac1e298",
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_cv = GridSearchCV(xgb_model, param_grid, n_jobs=-1, verbose=1, cv=3, scoring='roc_auc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 383,
   "id": "6197cd67",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 324 candidates, totalling 972 fits\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3,\n",
       "             estimator=XGBClassifier(base_score=0.5, booster='gbtree',\n",
       "                                     callbacks=None, colsample_bylevel=1,\n",
       "                                     colsample_bynode=1, colsample_bytree=1,\n",
       "                                     early_stopping_rounds=None,\n",
       "                                     enable_categorical=False, eval_metric=None,\n",
       "                                     gamma=0, gpu_id=-1,\n",
       "                                     grow_policy='depthwise',\n",
       "                                     importance_type=None,\n",
       "                                     interaction_constraints='',\n",
       "                                     learning_rate=0.300000012, max_bin=256,\n",
       "                                     max_ca...\n",
       "                                     monotone_constraints='()',\n",
       "                                     n_estimators=100, n_jobs=0,\n",
       "                                     num_parallel_tree=1, predictor='auto',\n",
       "                                     random_state=0, reg_alpha=0, reg_lambda=1, ...),\n",
       "             n_jobs=-1,\n",
       "             param_grid={'colsample_bytree': [0.5], 'gamma': [0, 0.25, 1],\n",
       "                         'learning_rate': [0.1, 0.05, 0.01],\n",
       "                         'max_depth': [3, 4, 5, 7], 'reg_lambda': [0, 1, 10],\n",
       "                         'scale_pos_weight': [1, 3, 5], 'subsample': [0.8]},\n",
       "             scoring='roc_auc', verbose=1)"
      ]
     },
     "execution_count": 383,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_cv.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 384,
   "id": "2875deaf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8521506734006734"
      ]
     },
     "execution_count": 384,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_cv.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 385,
   "id": "756ff49d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'colsample_bytree': 0.5,\n",
       " 'gamma': 0,\n",
       " 'learning_rate': 0.05,\n",
       " 'max_depth': 4,\n",
       " 'reg_lambda': 0,\n",
       " 'scale_pos_weight': 3,\n",
       " 'subsample': 0.8}"
      ]
     },
     "execution_count": 385,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_cv.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 386,
   "id": "42e650e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_model = xgb.XGBClassifier(**grid_cv.best_params_, objective=\"binary:logistic\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 387,
   "id": "bfc74539",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n",
       "              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.5,\n",
       "              early_stopping_rounds=None, enable_categorical=False,\n",
       "              eval_metric=None, gamma=0, gpu_id=-1, grow_policy='depthwise',\n",
       "              importance_type=None, interaction_constraints='',\n",
       "              learning_rate=0.05, max_bin=256, max_cat_to_onehot=4,\n",
       "              max_delta_step=0, max_depth=4, max_leaves=0, min_child_weight=1,\n",
       "              missing=nan, monotone_constraints='()', n_estimators=100,\n",
       "              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,\n",
       "              reg_alpha=0, reg_lambda=0, ...)"
      ]
     },
     "execution_count": 387,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 388,
   "id": "e3574397",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_xg_test = final_model.predict(X_test)\n",
    "pred_xg_train = final_model.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 389,
   "id": "5ae197a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error cv:    0.173\n",
      "error train: 0.183\n"
     ]
    }
   ],
   "source": [
    "error_cv = eval_err(y_test, pred_xg_test)\n",
    "error_train = eval_err(y_train, pred_xg_train)\n",
    "print(f\"error cv:    {error_cv :0.3f}\")\n",
    "print(f\"error train: {error_train :0.3f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 390,
   "id": "6beec355",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy: 82.681564\n"
     ]
    }
   ],
   "source": [
    "print('Test Accuracy: %f'%(np.mean(pred_xg_test == y_test) * 100))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85ab92cf",
   "metadata": {},
   "source": [
    "## Building a Decision Tree Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9ba65f1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Calculate entropy at y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 467,
   "id": "c4a42480",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_entropy(y):\n",
    "    \n",
    "    m = len(y)\n",
    "    entropy = 0.\n",
    "    p1 = 0\n",
    "    ## Size must be bigger than 0\n",
    "    if m <= 0:\n",
    "        return entropy\n",
    "    # Iterate over examples to get p1 (ratio of elements that are positive == 1)\n",
    "    for i in range(m):\n",
    "        if y[i] == 1:\n",
    "            p1 += 1\n",
    "    ## Getting p1 and, by consequence, p2\n",
    "    p1 = p1 / m\n",
    "    p2 = 1 - p1\n",
    "    \n",
    "    if p1 == 1 or p1 == 0:\n",
    "        return entropy\n",
    "    else:\n",
    "        #Calculating entropy when p1 is not 0 or 1 (becaus of log2(0) == inf.)\n",
    "        entropy = (-p1* np.log2(p1)) - (p2 * np.log2(p2))\n",
    "        \n",
    "        return entropy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 468,
   "id": "7b4c0f37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9491065174123546"
      ]
     },
     "execution_count": 468,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calculate_entropy(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "a6ed998f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting dataset - using current data to split between left and right branches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 469,
   "id": "b85196c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 0, 1, ..., 0, 0, 0],\n",
       "       [1, 0, 1, ..., 0, 0, 0],\n",
       "       [1, 0, 1, ..., 0, 0, 0],\n",
       "       ...,\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 1, ..., 0, 0, 0]], dtype=int64)"
      ]
     },
     "execution_count": 469,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 470,
   "id": "b5486793",
   "metadata": {},
   "outputs": [],
   "source": [
    "def split_data(X, feature, root_index):\n",
    "    \n",
    "    m = X.shape[0]\n",
    "    left_branch = []\n",
    "    right_branch = []\n",
    "    \n",
    "    for i in range(m):\n",
    "        if X[i][feature] == 1:\n",
    "            left_branch.append(i)\n",
    "        else:\n",
    "            right_branch.append(i)\n",
    "            \n",
    "    return left_branch, right_branch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 471,
   "id": "59fb03f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "root_index = np.arange(0, X_train.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 472,
   "id": "c3f8cdf8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def info_gain(X, y, feature, node_indices):\n",
    "    \n",
    "    info_gain = 0.\n",
    "    \n",
    "    left, right = split_data(X, feature, node_indices)\n",
    "    \n",
    "    p1_entr = calculate_entropy(y[node_indices])\n",
    "    left_entr = calculate_entropy(y[left])\n",
    "    right_entr = calculate_entropy(y[right])\n",
    "    \n",
    "    weight_lef = len(left)/ (len(right) + len(left))\n",
    "    weight_ri = 1 - weight_lef\n",
    "    \n",
    "    info_gain = p1_entr - (weight_lef * left_entr + right_entr * weight_ri)\n",
    "    \n",
    "    return info_gain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "id": "90b3275e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.20821002408308886"
      ]
     },
     "execution_count": 473,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "info_gain(X_train, y_train, 0, root_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 474,
   "id": "1c6a4c98",
   "metadata": {},
   "outputs": [],
   "source": [
    "def best_split(X, y, node_indices):\n",
    "    m, n = X.shape\n",
    "    \n",
    "    best_feature = -1\n",
    "    aux = 0\n",
    "    gain_hist = []\n",
    "    \n",
    "    for i in range(n):\n",
    "        gain = info_gain(X, y, i, node_indices)\n",
    "        gain_hist.append(gain)\n",
    "        if gain > aux:\n",
    "            best_feature = i\n",
    "            aux = gain\n",
    "    \n",
    "    return best_feature, gain_hist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 475,
   "id": "c358c3bc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "68\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "best_feature, gain_hist = best_split(X_train, y_train, root_index)\n",
    "print(best_feature)\n",
    "plt.plot(gain_hist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 498,
   "id": "fa4ce575",
   "metadata": {},
   "outputs": [],
   "source": [
    "tree = []\n",
    "\n",
    "def build_tree_rec(X, y, node_indices, max_depth, current_depth, b_name):\n",
    "\n",
    "    if current_depth == max_depth:\n",
    "        formatting = \" \"*current_depth + \"-\"*current_depth\n",
    "        print(formatting, \"%s leaf node with indices\" % b_name, node_indices[:3])\n",
    "        return\n",
    "    \n",
    "    bf, gh = best_split(X, y, node_indices)\n",
    "    \n",
    "    tree.append((current_depth, b_name, bf, node_indices))\n",
    "    \n",
    "    formatting = \"-\"*current_depth\n",
    "    print(\"%s Depth %d, %s: Split on feature: %d\" % (formatting, current_depth, b_name, best_feature))\n",
    "    \n",
    "    left, right = split_data(X, bf, node_indices)\n",
    "    \n",
    "    build_tree_rec(X, y, left, max_depth, current_depth+1, \"Left\")\n",
    "    build_tree_rec(X, y, right, max_depth, current_depth+1, \"Right\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 499,
   "id": "950c205c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Depth 0, Root: Split on feature: 0\n",
      "- Depth 1, Left: Split on feature: 0\n",
      "  -- Left leaf node with indices [275, 383, 527]\n",
      "  -- Right leaf node with indices [0, 1, 2]\n",
      "- Depth 1, Right: Split on feature: 0\n",
      "  -- Left leaf node with indices [0, 1, 2]\n",
      "  -- Right leaf node with indices [3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "build_tree_rec(X_train, y_train, root_index, 2, 0, \"Root\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 514,
   "id": "f2167138",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0,\n",
       " 1,\n",
       " 2,\n",
       " 6,\n",
       " 7,\n",
       " 9,\n",
       " 10,\n",
       " 11,\n",
       " 12,\n",
       " 13,\n",
       " 15,\n",
       " 16,\n",
       " 17,\n",
       " 19,\n",
       " 20,\n",
       " 21,\n",
       " 22,\n",
       " 23,\n",
       " 25,\n",
       " 27,\n",
       " 30,\n",
       " 31,\n",
       " 32,\n",
       " 33,\n",
       " 34,\n",
       " 36,\n",
       " 37,\n",
       " 39,\n",
       " 42,\n",
       " 43,\n",
       " 45,\n",
       " 47,\n",
       " 48,\n",
       " 49,\n",
       " 50,\n",
       " 51,\n",
       " 52,\n",
       " 55,\n",
       " 56,\n",
       " 57,\n",
       " 60,\n",
       " 61,\n",
       " 63,\n",
       " 64,\n",
       " 67,\n",
       " 68,\n",
       " 71,\n",
       " 73,\n",
       " 74,\n",
       " 75,\n",
       " 76,\n",
       " 77,\n",
       " 78,\n",
       " 80,\n",
       " 81,\n",
       " 83,\n",
       " 84,\n",
       " 86,\n",
       " 87,\n",
       " 90,\n",
       " 95,\n",
       " 98,\n",
       " 99,\n",
       " 101,\n",
       " 103,\n",
       " 104,\n",
       " 105,\n",
       " 106,\n",
       " 107,\n",
       " 109,\n",
       " 110,\n",
       " 111,\n",
       " 112,\n",
       " 113,\n",
       " 115,\n",
       " 116,\n",
       " 118,\n",
       " 121,\n",
       " 122,\n",
       " 123,\n",
       " 124,\n",
       " 125,\n",
       " 126,\n",
       " 127,\n",
       " 130,\n",
       " 131,\n",
       " 133,\n",
       " 135,\n",
       " 137,\n",
       " 138,\n",
       " 140,\n",
       " 141,\n",
       " 144,\n",
       " 145,\n",
       " 146,\n",
       " 147,\n",
       " 148,\n",
       " 151,\n",
       " 152,\n",
       " 155,\n",
       " 156,\n",
       " 157,\n",
       " 158,\n",
       " 159,\n",
       " 162,\n",
       " 163,\n",
       " 165,\n",
       " 167,\n",
       " 168,\n",
       " 169,\n",
       " 170,\n",
       " 171,\n",
       " 172,\n",
       " 174,\n",
       " 175,\n",
       " 176,\n",
       " 178,\n",
       " 179,\n",
       " 182,\n",
       " 184,\n",
       " 185,\n",
       " 187,\n",
       " 188,\n",
       " 189,\n",
       " 190,\n",
       " 193,\n",
       " 194,\n",
       " 195,\n",
       " 196,\n",
       " 197,\n",
       " 198,\n",
       " 200,\n",
       " 201,\n",
       " 202,\n",
       " 204,\n",
       " 205,\n",
       " 206,\n",
       " 207,\n",
       " 208,\n",
       " 210,\n",
       " 212,\n",
       " 213,\n",
       " 214,\n",
       " 215,\n",
       " 216,\n",
       " 217,\n",
       " 219,\n",
       " 220,\n",
       " 221,\n",
       " 222,\n",
       " 224,\n",
       " 226,\n",
       " 227,\n",
       " 228,\n",
       " 229,\n",
       " 230,\n",
       " 231,\n",
       " 232,\n",
       " 233,\n",
       " 235,\n",
       " 236,\n",
       " 238,\n",
       " 239,\n",
       " 240,\n",
       " 241,\n",
       " 242,\n",
       " 243,\n",
       " 246,\n",
       " 247,\n",
       " 248,\n",
       " 249,\n",
       " 250,\n",
       " 251,\n",
       " 252,\n",
       " 253,\n",
       " 254,\n",
       " 260,\n",
       " 261,\n",
       " 262,\n",
       " 265,\n",
       " 267,\n",
       " 268,\n",
       " 269,\n",
       " 270,\n",
       " 271,\n",
       " 272,\n",
       " 274,\n",
       " 276,\n",
       " 280,\n",
       " 281,\n",
       " 283,\n",
       " 284,\n",
       " 285,\n",
       " 286,\n",
       " 287,\n",
       " 288,\n",
       " 290,\n",
       " 291,\n",
       " 292,\n",
       " 293,\n",
       " 294,\n",
       " 295,\n",
       " 296,\n",
       " 297,\n",
       " 298,\n",
       " 299,\n",
       " 302,\n",
       " 304,\n",
       " 306,\n",
       " 307,\n",
       " 310,\n",
       " 311,\n",
       " 312,\n",
       " 314,\n",
       " 315,\n",
       " 317,\n",
       " 318,\n",
       " 319,\n",
       " 320,\n",
       " 321,\n",
       " 324,\n",
       " 328,\n",
       " 330,\n",
       " 331,\n",
       " 332,\n",
       " 335,\n",
       " 336,\n",
       " 337,\n",
       " 338,\n",
       " 341,\n",
       " 342,\n",
       " 343,\n",
       " 345,\n",
       " 347,\n",
       " 349,\n",
       " 351,\n",
       " 352,\n",
       " 356,\n",
       " 357,\n",
       " 359,\n",
       " 360,\n",
       " 362,\n",
       " 363,\n",
       " 364,\n",
       " 365,\n",
       " 366,\n",
       " 368,\n",
       " 369,\n",
       " 370,\n",
       " 371,\n",
       " 372,\n",
       " 373,\n",
       " 375,\n",
       " 376,\n",
       " 378,\n",
       " 379,\n",
       " 381,\n",
       " 382,\n",
       " 383,\n",
       " 385,\n",
       " 386,\n",
       " 387,\n",
       " 389,\n",
       " 390,\n",
       " 391,\n",
       " 392,\n",
       " 394,\n",
       " 397,\n",
       " 398,\n",
       " 400,\n",
       " 402,\n",
       " 403,\n",
       " 404,\n",
       " 405,\n",
       " 406,\n",
       " 407,\n",
       " 408,\n",
       " 410,\n",
       " 411,\n",
       " 413,\n",
       " 414,\n",
       " 415,\n",
       " 416,\n",
       " 418,\n",
       " 421,\n",
       " 422,\n",
       " 425,\n",
       " 427,\n",
       " 428,\n",
       " 430,\n",
       " 434,\n",
       " 435,\n",
       " 436,\n",
       " 438,\n",
       " 440,\n",
       " 442,\n",
       " 444,\n",
       " 446,\n",
       " 448,\n",
       " 449,\n",
       " 451,\n",
       " 452,\n",
       " 453,\n",
       " 455,\n",
       " 456,\n",
       " 457,\n",
       " 458,\n",
       " 459,\n",
       " 460,\n",
       " 461,\n",
       " 462,\n",
       " 463,\n",
       " 465,\n",
       " 467,\n",
       " 469,\n",
       " 470,\n",
       " 471,\n",
       " 472,\n",
       " 473,\n",
       " 474,\n",
       " 478,\n",
       " 481,\n",
       " 485,\n",
       " 486,\n",
       " 487,\n",
       " 489,\n",
       " 490,\n",
       " 491,\n",
       " 492,\n",
       " 495,\n",
       " 500,\n",
       " 502,\n",
       " 503,\n",
       " 504,\n",
       " 507,\n",
       " 509,\n",
       " 512,\n",
       " 513,\n",
       " 515,\n",
       " 516,\n",
       " 519,\n",
       " 521,\n",
       " 522,\n",
       " 524,\n",
       " 525,\n",
       " 526,\n",
       " 527,\n",
       " 531,\n",
       " 532,\n",
       " 533,\n",
       " 534,\n",
       " 535,\n",
       " 537,\n",
       " 538,\n",
       " 540,\n",
       " 544,\n",
       " 545,\n",
       " 547,\n",
       " 551,\n",
       " 552,\n",
       " 553,\n",
       " 555,\n",
       " 556,\n",
       " 557,\n",
       " 559,\n",
       " 560,\n",
       " 561,\n",
       " 563,\n",
       " 564,\n",
       " 566,\n",
       " 567,\n",
       " 569,\n",
       " 571,\n",
       " 572,\n",
       " 573,\n",
       " 576,\n",
       " 578,\n",
       " 583,\n",
       " 584,\n",
       " 585,\n",
       " 586,\n",
       " 587,\n",
       " 588,\n",
       " 590,\n",
       " 591,\n",
       " 592,\n",
       " 593,\n",
       " 594,\n",
       " 595,\n",
       " 596,\n",
       " 597,\n",
       " 602,\n",
       " 603,\n",
       " 604,\n",
       " 605,\n",
       " 606,\n",
       " 607,\n",
       " 608,\n",
       " 611,\n",
       " 614,\n",
       " 615,\n",
       " 616,\n",
       " 618,\n",
       " 619,\n",
       " 620,\n",
       " 621,\n",
       " 622,\n",
       " 623,\n",
       " 624,\n",
       " 625,\n",
       " 626,\n",
       " 627,\n",
       " 629,\n",
       " 630,\n",
       " 631,\n",
       " 632,\n",
       " 633,\n",
       " 635,\n",
       " 636,\n",
       " 641,\n",
       " 642,\n",
       " 643,\n",
       " 644,\n",
       " 645,\n",
       " 646,\n",
       " 647,\n",
       " 648,\n",
       " 651,\n",
       " 652,\n",
       " 654,\n",
       " 658,\n",
       " 661,\n",
       " 665,\n",
       " 666,\n",
       " 667,\n",
       " 668,\n",
       " 669,\n",
       " 670,\n",
       " 672,\n",
       " 675,\n",
       " 676,\n",
       " 677,\n",
       " 678,\n",
       " 679,\n",
       " 682,\n",
       " 683,\n",
       " 685,\n",
       " 686,\n",
       " 687,\n",
       " 690,\n",
       " 691,\n",
       " 694,\n",
       " 695,\n",
       " 696,\n",
       " 697,\n",
       " 698,\n",
       " 700,\n",
       " 701,\n",
       " 703,\n",
       " 705,\n",
       " 706,\n",
       " 707,\n",
       " 708]"
      ]
     },
     "execution_count": 514,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree[1][3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "id": "281bb749",
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_inc(y, yhat):\n",
    "    correct = 0\n",
    "    m = len(yhat)\n",
    "    for i in range(m):\n",
    "        if y[i] == 1:\n",
    "            correct += 1\n",
    "    \n",
    "    correct = correct / m\n",
    "        \n",
    "    return correct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 520,
   "id": "2b515bf8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36.285097192224626\n",
      "34.13654618473896\n"
     ]
    }
   ],
   "source": [
    "print(check_inc(y_train, tree[1][3])*100)\n",
    "print(check_inc(y_train, tree[2][3])*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "id": "d76355d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "      <th>Parch_1</th>\n",
       "      <th>Parch_2</th>\n",
       "      <th>Parch_3</th>\n",
       "      <th>Parch_4</th>\n",
       "      <th>Parch_5</th>\n",
       "      <th>Parch_6</th>\n",
       "      <th>...</th>\n",
       "      <th>Age_Fare_1050.0</th>\n",
       "      <th>Age_Fare_1200.0</th>\n",
       "      <th>Age_Fare_1350.0</th>\n",
       "      <th>Age_Fare_1500.0</th>\n",
       "      <th>Age_Fare_1650.0</th>\n",
       "      <th>Age_Fare_1800.0</th>\n",
       "      <th>Age_Fare_1950.0</th>\n",
       "      <th>Age_Fare_2100.0</th>\n",
       "      <th>Age_Fare_2250.0</th>\n",
       "      <th>Age_Fare_2400.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 69 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Survived  Sex  Q  S  Parch_1  Parch_2  Parch_3  Parch_4  Parch_5  Parch_6  \\\n",
       "0          0    1  0  1        0        0        0        0        0        0   \n",
       "1          1    0  0  0        0        0        0        0        0        0   \n",
       "2          1    0  0  1        0        0        0        0        0        0   \n",
       "3          1    0  0  1        0        0        0        0        0        0   \n",
       "4          0    1  0  1        0        0        0        0        0        0   \n",
       "5          0    1  1  0        0        0        0        0        0        0   \n",
       "6          0    1  0  1        0        0        0        0        0        0   \n",
       "7          0    1  0  1        1        0        0        0        0        0   \n",
       "8          1    0  0  1        0        1        0        0        0        0   \n",
       "9          1    0  0  0        0        0        0        0        0        0   \n",
       "10         1    0  0  1        1        0        0        0        0        0   \n",
       "11         1    0  0  1        0        0        0        0        0        0   \n",
       "12         0    1  0  1        0        0        0        0        0        0   \n",
       "13         0    1  0  1        0        0        0        0        1        0   \n",
       "14         0    0  0  1        0        0        0        0        0        0   \n",
       "15         1    0  0  1        0        0        0        0        0        0   \n",
       "16         0    1  1  0        1        0        0        0        0        0   \n",
       "17         1    1  0  1        0        0        0        0        0        0   \n",
       "18         0    0  0  1        0        0        0        0        0        0   \n",
       "19         1    0  0  0        0        0        0        0        0        0   \n",
       "\n",
       "    ...  Age_Fare_1050.0  Age_Fare_1200.0  Age_Fare_1350.0  Age_Fare_1500.0  \\\n",
       "0   ...                0                0                0                0   \n",
       "1   ...                0                0                0                0   \n",
       "2   ...                0                0                0                0   \n",
       "3   ...                0                0                0                0   \n",
       "4   ...                0                0                0                0   \n",
       "5   ...                0                0                0                0   \n",
       "6   ...                0                0                0                0   \n",
       "7   ...                0                0                0                0   \n",
       "8   ...                0                0                0                0   \n",
       "9   ...                0                0                0                0   \n",
       "10  ...                0                0                0                0   \n",
       "11  ...                0                0                0                1   \n",
       "12  ...                0                0                0                0   \n",
       "13  ...                0                1                0                0   \n",
       "14  ...                0                0                0                0   \n",
       "15  ...                0                0                0                0   \n",
       "16  ...                0                0                0                0   \n",
       "17  ...                0                0                0                0   \n",
       "18  ...                0                0                0                0   \n",
       "19  ...                0                0                0                0   \n",
       "\n",
       "    Age_Fare_1650.0  Age_Fare_1800.0  Age_Fare_1950.0  Age_Fare_2100.0  \\\n",
       "0                 0                0                0                0   \n",
       "1                 0                0                0                0   \n",
       "2                 0                0                0                0   \n",
       "3                 0                1                0                0   \n",
       "4                 0                0                0                0   \n",
       "5                 0                0                0                0   \n",
       "6                 0                0                0                0   \n",
       "7                 0                0                0                0   \n",
       "8                 0                0                0                0   \n",
       "9                 0                0                0                0   \n",
       "10                0                0                0                0   \n",
       "11                0                0                0                0   \n",
       "12                0                0                0                0   \n",
       "13                0                0                0                0   \n",
       "14                0                0                0                0   \n",
       "15                0                0                0                0   \n",
       "16                0                0                0                0   \n",
       "17                0                0                0                0   \n",
       "18                0                0                0                0   \n",
       "19                0                0                0                0   \n",
       "\n",
       "    Age_Fare_2250.0  Age_Fare_2400.0  \n",
       "0                 0                0  \n",
       "1                 0                0  \n",
       "2                 0                0  \n",
       "3                 0                0  \n",
       "4                 0                0  \n",
       "5                 0                0  \n",
       "6                 0                0  \n",
       "7                 0                0  \n",
       "8                 0                0  \n",
       "9                 0                0  \n",
       "10                0                0  \n",
       "11                0                0  \n",
       "12                0                0  \n",
       "13                0                0  \n",
       "14                0                0  \n",
       "15                0                0  \n",
       "16                0                0  \n",
       "17                0                0  \n",
       "18                0                0  \n",
       "19                0                0  \n",
       "\n",
       "[20 rows x 69 columns]"
      ]
     },
     "execution_count": 519,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df[:20]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
